#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Zebra iMZ320 ‚Äî –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–µ—á–∞—Ç–∏ —Å macOS –ø–æ Bluetooth/USB.
–ê–≤—Ç–æ–ø–æ–∏—Å–∫ /dev/tty.* –ø–æ—Ä—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ 19200 –±–æ–¥, –æ—Ç–ø—Ä–∞–≤–∫–∞ CPCL.
–ê—Ä–≥—É–º–µ–Ω—Ç—ã:
  --port /dev/tty.Zebra-IMZ320-SerialPort   # —É–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç –≤—Ä—É—á–Ω—É—é
  --baud 19200                               # —Å–∫–æ—Ä–æ—Å—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 19200)
  --text "Hello Zebra!"                      # —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
  --file path/to/file.lbl                    # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å CPCL –∏–∑ —Ñ–∞–π–ª–∞
  --dry-run                                  # –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∏ –≤—ã–π—Ç–∏
"""

import sys, time, argparse
import serial
from serial.tools import list_ports

DEFAULT_BAUD = 19200

CPCL_TEMPLATE = """! 0 200 200 240 1
TEXT 4 0 30 30 SalesPortal Test
TEXT 4 0 30 70 {line1}
TEXT 4 0 30 110 Date: {date}
TEXT 4 0 30 150 OK: CPCL sent
PRINT
"""

def autodetect_port() -> str | None:
    """–ò—â–µ–º Zebra-–ø–æ–¥–æ–±–Ω—ã–µ –ø–æ—Ä—Ç—ã —Å—Ä–µ–¥–∏ /dev/tty.*"""
    candidates = []
    for p in list_ports.comports():
        name = (p.device or "") + " " + (p.description or "") + " " + (p.manufacturer or "")
        name_l = name.lower()
        if "zebra" in name_l or "imz" in name_l or "mz" in name_l or "cpcl" in name_l:
            candidates.append(p.device)
    # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ ¬´–∑–µ–±—Ä–æ–≤–æ–≥–æ¬ª –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –≤–µ—Ä–Ω—ë–º –ø–µ—Ä–≤—ã–π tty.* –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if not candidates:
        for p in list_ports.comports():
            if "/tty." in (p.device or ""):
                candidates.append(p.device)
                break
    return candidates[0] if candidates else None

def send_cpcl(port: str, baud: int, payload: bytes) -> int:
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç, —à–ª—ë–º, –∂–¥—ë–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º."""
    ser = serial.Serial(
        port=port,
        baudrate=baud,
        bytesize=serial.EIGHTBITS,
        parity=serial.PARITY_NONE,
        stopbits=serial.STOPBITS_ONE,
        timeout=2,
        write_timeout=5,
    )
    try:
        n = ser.write(payload)
        ser.flush()
        # –ó–µ–±—Ä–µ –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –º–≥–Ω–æ–≤–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è
        time.sleep(0.2)
        return n
    finally:
        ser.close()

def main():
    ap = argparse.ArgumentParser(description="Zebra iMZ320 CPCL test")
    ap.add_argument("--port", help="–ø—É—Ç—å –∫ –ø–æ—Ä—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä /dev/tty.Zebra-IMZ320-SerialPort")
    ap.add_argument("--baud", type=int, default=DEFAULT_BAUD, help=f"—Å–∫–æ—Ä–æ—Å—Ç—å, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {DEFAULT_BAUD}")
    ap.add_argument("--text", default="Hello Zebra!", help="—Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏")
    ap.add_argument("--file", dest="cpcl_file", help="–ø—É—Ç—å –∫ CPCL-—Ñ–∞–π–ª—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –æ–Ω)")
    ap.add_argument("--dry-run", action="store_true", help="—Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º, –∏ –≤—ã–π—Ç–∏")
    args = ap.parse_args()

    port = args.port or autodetect_port()
    if not port:
        print("‚ùå –ü–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–∫–ª—é—á–∏ –ø—Ä–∏–Ω—Ç–µ—Ä –∏ Bluetooth, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—å: ls /dev/tty.*")
        sys.exit(2)

    if args.cpcl_file:
        with open(args.cpcl_file, "rb") as f:
            payload = f.read()
    else:
        from datetime import datetime
        cpcl = CPCL_TEMPLATE.format(line1=args.text, date=datetime.now().strftime("%Y-%m-%d %H:%M"))
        # –î–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º \n –≤ \r\n (–º–Ω–æ–≥–∏–µ –ø—Ä–æ—à–∏–≤–∫–∏ –ª—é–±—è—Ç CRLF)
        cpcl = cpcl.replace("\r\n", "\n").replace("\n", "\r\n")
        payload = cpcl.encode("utf-8")

    print(f"üîé Port: {port}")
    print(f"‚öôÔ∏è  Baud: {args.baud}")
    if args.dry_run:
        print("üìù CPCL to send:\n" + payload.decode("utf-8", errors="ignore"))
        return

    try:
        n = send_cpcl(port, args.baud, payload)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {n} –±–∞–π—Ç –≤ –ø—Ä–∏–Ω—Ç–µ—Ä. –ï—Å–ª–∏ —Ç–∏—à–∏–Ω–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—å –∑–∞—Ä—è–¥/—Å–æ–Ω –∏ –∏–º—è –ø–æ—Ä—Ç–∞.")
    except serial.SerialException as e:
        print(f"‚ùå Serial error: {e}")
        if "Permission" in str(e):
            print("   –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø–æ–ø—Ä–æ–±—É–π –≤—Ä–µ–º–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ sudo –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ /dev/tty.*")
        sys.exit(1)

if __name__ == "__main__":
    main()
